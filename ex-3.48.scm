(define (make-account-and-serializer balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer))
        (id (generate-id)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'serializer) balance-serializer)
            ((eq? m 'id) id)
            (else (error "Unknown request -- MAKE-ACCOUNT"
                         m))))
    dispatch))

(define generate-id
  (let ((id 0)
        (serializer (make-serializer)))
    (serializer
      (lambda ()
        (set! id (+ id 1))
        id))))
; (define (serialized-exchange account1 account2)
;   (let ((serializer1 (account1 'serializer))
;         (serializer2 (account2 'serializer)))
;     (let ((s-exchange (if (< (account1 'id) (account2 'id))
;                         (serializer2 (serializer1 exchange))
;                         (serializer1 (serializer2 exchange)))))
;       (s-exchange
;         account1
;         account2))))

(define (serialized-exchange account1 accout2)
  (define (s-exchange account1 account2)
    (let ((serializer1 (account1 'serializer))
          (serializer2 (account2 'serializer)))
      ((serializer1 (serializer2 exchange))
       account1
       account2)))
  (if (< (account1 'id) (account2 'id))
    (s-exchange account2 account1)
    (s-exchange account1 account2)))
